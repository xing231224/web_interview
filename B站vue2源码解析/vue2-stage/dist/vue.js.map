{"version":3,"file":"vue.js","sources":["../src/compiler/parse.js","../src/compiler/index.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["const ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`; // 匹配到的分组是一个标签名 <xxx\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`); // 匹配的是</xxxx> 最终匹配到的分组就是结束标签\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\r\nconst startTagClose = /^\\s*(\\/?)>/;\r\n\r\n\r\n\r\n// vue3 采用的不是使用正则\r\n// 对模板进行编译处理\r\nexport function parseHTML(html) {\r\n\r\n    const ELEMENT_TYPE = 1, TEXT_TYPE = 3;\r\n    const stack = [];  // 用于存放元素的\r\n    let currentParent, root; // 指向的是栈中的最后一个\r\n    // 最终需要转化成一棵抽象语法树\r\n    function createASTElement(tag, attrs) {\r\n        return {\r\n            tag,\r\n            type: ELEMENT_TYPE,\r\n            children: [],\r\n            attrs,\r\n            parent: null\r\n        }\r\n    }\r\n    // 利用栈型结构 来构造一棵树\r\n    function start(tag, attrs) {\r\n        let node = createASTElement(tag, attrs); //创造一个ast节点\r\n        if (!root) {  // 看下是否是空树\r\n            root = node // 如果为空则当前是树的根节点\r\n        }\r\n        if (currentParent) {\r\n            node.parent = currentParent\r\n            currentParent.children.push(node)\r\n        }\r\n        stack.push(node);\r\n        currentParent = node  // currentParent为栈中的最后一个\r\n    }\r\n    function chars(text) { //文本直接放到当前指向的节点中\r\n        text = text.replace(/\\s/g, '')\r\n        text && currentParent.children.push({\r\n            type: TEXT_TYPE,\r\n            text,\r\n            parent: currentParent\r\n        });\r\n    }\r\n    function end(tag) {\r\n        let node = stack.pop(); // 弹出最后一个，校验是否合法\r\n        currentParent = stack[stack.length - 1]\r\n    }\r\n    function advance(n) {\r\n        html = html.substring(n);\r\n    }\r\n    function parseStartTag() {\r\n        const start = html.match(startTagOpen);\r\n        if (start) {\r\n            const match = {\r\n                tagName: start[1], // 标签名\r\n                attrs: []\r\n            }\r\n            advance(start[0].length);\r\n            // 如果不是开始标签的结束 就一直匹配下去\r\n            let attr, end;\r\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n                advance(attr[0].length);\r\n                match.attrs.push({ name: attr[1], value: attr[3] || attr[4] || attr[5] || true })\r\n            }\r\n\r\n            if (end) {\r\n                advance(end[0].length);\r\n            }\r\n            return match\r\n        }\r\n\r\n        return false; //不是开始标签\r\n    }\r\n\r\n\r\n    // html 最开始肯定是个 <\r\n    while (html) {\r\n        // 如果textEnd 为0 说明是一个开始标签或者结束标签\r\n        // 如果textEnd >0  说明就是文本的结束位置\r\n        let textEnd = html.indexOf(\"<\") // 如果indexOf中的索引是0 则说明是个标签\r\n        if (textEnd === 0) {\r\n            const startTagMatch = parseStartTag();\r\n            if (startTagMatch) {  // 解析到的开始标签\r\n                start(startTagMatch.tagName, startTagMatch.attrs)\r\n                continue\r\n            }\r\n            let endTagMatch = html.match(endTag)\r\n            if (endTagMatch) {\r\n                advance(endTagMatch[0].length);\r\n                end(startTagMatch.tagName)\r\n                continue\r\n            }\r\n        }\r\n        if (textEnd > 0) {\r\n            let text = html.substring(0, textEnd); // 文本内容\r\n            if (text) {\r\n                advance(text.length)\r\n                chars(text);\r\n            }\r\n        }\r\n    }\r\n    return root\r\n}\r\n","import { parseHTML } from \"./parse\"\r\n\r\nfunction genProps(attrs) {\r\n    let str = ''\r\n    for (let i = 0; i < attrs.length; i++) {\r\n        let attr = attrs[i]\r\n        if (attr.name === 'style') {\r\n            let obj = {};\r\n            attr.value.split(';').forEach(item => {\r\n                let [key, value] = item.split(\":\")\r\n                obj[key] = value\r\n            })\r\n            attr.value = obj\r\n        }\r\n        str += `${attr.name}:${JSON.stringify(attr.value)},`\r\n    }\r\n    return `{${str.slice(0, -1)}}`\r\n}\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g; // {{assss}} 匹配到的内容那就是我们表达式的变量\r\n\r\nfunction gen(node) {\r\n    if (node.type === 1) {\r\n        return codegen(node)\r\n    } else {\r\n        // 文本\r\n        let text = node.text\r\n        if (!defaultTagRE.test(text)) {\r\n            return `_v(${JSON.stringify(text)})`\r\n        } else {\r\n            let tokens = [], match, lastIndex = 0;\r\n            defaultTagRE.lastIndex = 0;\r\n            while (match = defaultTagRE.exec(text)) {\r\n                let index = match.index\r\n                if (index > lastIndex) {\r\n                    tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n                }\r\n                tokens.push(`_s(${match[1].trim()})`)\r\n                lastIndex = index + match[0].length\r\n            }\r\n            if (lastIndex < text.length) {\r\n                tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n            }\r\n\r\n            return `_v(${tokens.join(\"+\")})`\r\n        }\r\n    }\r\n}\r\nfunction genChildren(children) {\r\n    return children.map(child => gen(child)).join(',')\r\n}\r\nfunction codegen(ast) {\r\n    let children = genChildren(ast.children);\r\n    let code = (`_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'}${ast.children.length ? `,${children}` : ''})`);\r\n    return code\r\n}\r\n\r\n\r\nexport function compileToFunction(template) {\r\n    // 1.将template 转化成ast语法树\r\n    let ast = parseHTML(template)\r\n    // 2.生成render方法 （render方法执行后的结果就是虚拟DOM）\r\n    let code = codegen(ast);\r\n    code = `with(this){return ${code}}`;\r\n    let render = new Function(code); // 根据代码生成render函数\r\n}","// 重写数组中的方法\r\nlet oldArrayProto = Array.prototype;  // 获取数组的原型\r\n\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\nconst methods = [  // 找到所有的变异方法\r\n    \"push\",\r\n    \"pop\",\r\n    \"shift\",\r\n    \"unshift\",\r\n    \"reverse\",\r\n    \"sort\",\r\n    \"splice\"\r\n] // concat slice  都不会改变原数组\r\n\r\nmethods.forEach(method => {\r\n    newArrayProto[method] = function (...args) {  // 重写了数组的方法\r\n        const result = oldArrayProto[method].call(this, ...args)  // 内部调用原来的方法，函数的劫持 切片编程\r\n        // 需要对新增的数据再次进行劫持\r\n        let inserted;\r\n        const ob = this.__ob__\r\n        switch (method) {\r\n            case 'push':\r\n            case 'unshift':\r\n                inserted = args\r\n                break;\r\n            case 'splice':\r\n                inserted = args.slice(2)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (inserted) {\r\n            //对新增的内容再次进行观测 \r\n            ob.observeArray(inserted)\r\n        }\r\n        return result\r\n    }\r\n})","import { newArrayProto } from \"./array\"\r\n\r\nclass Observer {\r\n    constructor(data) {\r\n        // Object.defineProperty 只能劫持已经存在的属性 （vue里面会为此单独写一些api）\r\n        Object.defineProperty(data, '__ob__', {\r\n            value: this,\r\n            enumerable: false  // 将__ob__变成不可枚举（循环的时候无法获取到）\r\n        })\r\n        // data.__ob__ = this;  // 给数据加了一个标识 如果数据上有__ob__ 则说明这个属性被观测过\r\n        if (Array.isArray(data)) {\r\n            // 这里我们可以重写数组中的方法 7个变异方法 是可以修改数组本身的\r\n            data.__proto__ = newArrayProto // 需要保留数组原有的特性，并且可以重写部分方法\r\n            this.observeArray(data) // 如果数组中放的是对象 可以监控到对象变化\r\n        } else {\r\n            this.walk(data)\r\n        }\r\n    }\r\n    walk(data) {  // 循环对象  对属性依次劫持\r\n        // 重新定义 属性\r\n        Object.keys(data).forEach(key => { defineReactive(data, key, data[key]) })\r\n    }\r\n    observeArray(data) {\r\n        data.forEach(item => observe(item))\r\n    }\r\n}\r\n\r\nexport function defineReactive(target, key, value) { // 闭包 属性劫持\r\n    observe(value)\r\n    Object.defineProperty(target, key, {\r\n        get() { // 取值的时候 会执行get\r\n            console.log('用户取值====>', value);\r\n            return value\r\n        },\r\n        set(newValue) { // 修改的时候 会执行set \r\n            console.log('用户设置值====>', newValue);\r\n            if (newValue === value) return;\r\n            observe(newValue)\r\n            value = newValue\r\n        }\r\n    })\r\n}\r\n\r\nexport function observe(data) {\r\n    //  对这个对象进行劫持 \r\n    if (typeof data !== 'object' || data == null) {\r\n        return; //只对对象进行劫持\r\n    }\r\n    if (data.__ob__ instanceof Observer) {\r\n        return data.__ob__\r\n    }\r\n    // 如果一个对象被劫持过了，那就不需要再劫持了（要判断一个对象是否被劫持过，可以增添一个实例，用实例来判断是否被劫持过）\r\n    return new Observer(data);\r\n}","import { observe } from \"./observe\";\r\n\r\nexport function initState(vm) {\r\n    const opts = vm.$options; //获取所有的选项\r\n    if (opts.data) {\r\n        initData(vm);\r\n    }\r\n}\r\nfunction proxy(vm, target, key) {\r\n    Object.defineProperty(vm, key, {\r\n        get() {\r\n            return vm[target][key];\r\n        },\r\n        set(newValue) {\r\n            vm[target][key] = newValue;\r\n        }\r\n    })\r\n}\r\nfunction initData(vm) {\r\n    let data = vm.$options.data;\r\n    data = typeof data === 'function' ? data.call(vm) : data;\r\n    vm._data = data\r\n    // 对数据进行劫持  vue2采用了一个api defineProperty\r\n    observe(data)\r\n    // 将vm._data 用vm来代理\r\n    for (let key in data) {\r\n        proxy(vm, '_data', key)\r\n    }\r\n\r\n}\r\n","import { compileToFunction } from \"./compiler\";\r\nimport { initState } from \"./state\";\r\n\r\nexport function initMixin(Vue) {\r\n    Vue.prototype._init = function (options) {  // 用于初始化操作\r\n        // vue  vm.$options 获取用户的配置\r\n        const vm = this;\r\n        vm.$options = options // 将用户的配置挂载在实例上\r\n        // 初始化状态\r\n        initState(vm);\r\n\r\n        if (options.el) {\r\n            vm.$mount(options.el); //实现数据挂载\r\n        }\r\n    }\r\n    Vue.prototype.$mount = function (el) {\r\n        const vm = this;\r\n        el = document.querySelector(el);\r\n        const ops = vm.$options\r\n        if (!ops.render) {\r\n            let template;\r\n            if (!ops.template && el) { //没有写模板 但是写了el\r\n                template = el.outerHTML\r\n            } else {\r\n                if (el) {\r\n                    template = ops.template\r\n                }\r\n            }\r\n            // 写了template 就优先使用template\r\n            if (template) {\r\n                // 需要对模板进行编译\r\n                const render = compileToFunction(template);\r\n                ops.render = render\r\n            }\r\n            console.log(template);\r\n        }\r\n        // script 标签引用的vue.global.js 这个编译过程是在浏览器运行的\r\n        // \r\n    }\r\n}\r\n\r\n","import { initMixin } from \"./init\"\r\n\r\n\r\nfunction Vue(options) {\r\n    this._init(options)\r\n}\r\n\r\ninitMixin(Vue);\r\n\r\nexport default Vue"],"names":["ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","children","parent","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","i","obj","split","forEach","item","key","JSON","stringify","slice","defaultTagRE","gen","codegen","test","tokens","lastIndex","exec","index","trim","join","genChildren","map","child","ast","code","compileToFunction","template","Function","oldArrayProto","Array","prototype","newArrayProto","Object","create","methods","method","args","result","call","inserted","ob","__ob__","observeArray","Observer","data","defineProperty","enumerable","isArray","__proto__","walk","keys","defineReactive","observe","target","get","console","log","set","newValue","initState","vm","opts","$options","initData","proxy","_data","initMixin","Vue","_init","options","el","$mount","document","querySelector","ops","render","outerHTML"],"mappings":"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"}